[1mdiff --git a/src/main/java/org/lab/mars/oenm2m/web/handler/WebClientChannelHandler.java b/src/main/java/org/lab/mars/oenm2m/web/handler/WebClientChannelHandler.java[m
[1mdeleted file mode 100644[m
[1mindex ababb97..0000000[m
[1m--- a/src/main/java/org/lab/mars/oenm2m/web/handler/WebClientChannelHandler.java[m
[1m+++ /dev/null[m
[36m@@ -1,46 +0,0 @@[m
[31m-package org.lab.mars.oenm2m.web.handler;[m
[31m-[m
[31m-import io.netty.channel.ChannelHandlerContext;[m
[31m-import io.netty.channel.SimpleChannelInboundHandler;[m
[31m-[m
[31m-import org.lab.mars.onem2m.web.nework.protol.M2mWebPacket;[m
[31m-import org.lab.onem2m.web.handle.HelloWorldController;[m
[31m-import org.lab.onem2m.web.handle.RetrieveKeyController;[m
[31m-[m
[31m-public class WebClientChannelHandler extends[m
[31m-        SimpleChannelInboundHandler<Object> {[m
[31m-    /**[m
[31m-     * Creates a client-side handler.[m
[31m-     */[m
[31m-    public WebClientChannelHandler() {[m
[31m-[m
[31m-    }[m
[31m-[m
[31m-    @Override[m
[31m-    public void channelActive(ChannelHandlerContext ctx) {[m
[31m-    }[m
[31m-[m
[31m-    @Override[m
[31m-    public void channelRead0(ChannelHandlerContext ctx, Object msg) {[m
[31m-        M2mWebPacket m2mWebPacket = (M2mWebPacket) msg;[m
[31m-        if (m2mWebPacket.getM2mRequestHeader().getKey() != null) {[m
[31m-            RetrieveKeyController.m2mWebPacket = m2mWebPacket;[m
[31m-            RetrieveKeyController.reentrantLock.lock();[m
[31m-            RetrieveKeyController.condition.signalAll();[m
[31m-            RetrieveKeyController.reentrantLock.unlock();[m
[31m-        } else {[m
[31m-            HelloWorldController.m2mWebPacket = m2mWebPacket;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    @Override[m
[31m-    public void channelReadComplete(ChannelHandlerContext ctx) {[m
[31m-        ctx.flush();[m
[31m-    }[m
[31m-[m
[31m-    @Override[m
[31m-    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {[m
[31m-        cause.printStackTrace();[m
[31m-        ctx.close();[m
[31m-    }[m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/src/main/java/org/lab/mars/onem2m/data/ACL.java b/src/main/java/org/lab/mars/onem2m/data/ACL.java[m
[1mdeleted file mode 100644[m
[1mindex 69cf7d6..0000000[m
[1m--- a/src/main/java/org/lab/mars/onem2m/data/ACL.java[m
[1m+++ /dev/null[m
[36m@@ -1,111 +0,0 @@[m
[31m-// File generated by hadoop record compiler. Do not edit.[m
[31m-/**[m
[31m-* Licensed to the Apache Software Foundation (ASF) under one[m
[31m-* or more contributor license agreements.  See the NOTICE file[m
[31m-* distributed with this work for additional information[m
[31m-* regarding copyright ownership.  The ASF licenses this file[m
[31m-* to you under the Apache License, Version 2.0 (the[m
[31m-* "License"); you may not use this file except in compliance[m
[31m-* with the License.  You may obtain a copy of the License at[m
[31m-*[m
[31m-*     http://www.apache.org/licenses/LICENSE-2.0[m
[31m-*[m
[31m-* Unless required by applicable law or agreed to in writing, software[m
[31m-* distributed under the License is distributed on an "AS IS" BASIS,[m
[31m-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[m
[31m-* See the License for the specific language governing permissions and[m
[31m-* limitations under the License.[m
[31m-*/[m
[31m-[m
[31m-package org.lab.mars.onem2m.data;[m
[31m-[m
[31m-import org.lab.mars.onem2m.jute.BinaryInputArchive;[m
[31m-import org.lab.mars.onem2m.jute.BinaryOutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.CsvOutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.InputArchive;[m
[31m-import org.lab.mars.onem2m.jute.OutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.Record;[m
[31m-public class ACL implements Record {[m
[31m-  private int perms;[m
[31m-  public ACL() {[m
[31m-  }[m
[31m-  public ACL([m
[31m-        int perms) {[m
[31m-    this.perms=perms;[m
[31m-  }[m
[31m-  public int getPerms() {[m
[31m-    return perms;[m
[31m-  }[m
[31m-  public void setPerms(int m_) {[m
[31m-    perms=m_;[m
[31m-  }[m
[31m-  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {[m
[31m-    a_.startRecord(this,tag);[m
[31m-    a_.writeInt(perms,"perms");[m
[31m-    a_.endRecord(this,tag);[m
[31m-  }[m
[31m-  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {[m
[31m-    a_.startRecord(tag);[m
[31m-    perms=a_.readInt("perms");[m
[31m-    a_.endRecord(tag);[m
[31m-}[m
[31m-  public String toString() {[m
[31m-    try {[m
[31m-      java.io.ByteArrayOutputStream s =[m
[31m-        new java.io.ByteArrayOutputStream();[m
[31m-      CsvOutputArchive a_ = [m
[31m-        new CsvOutputArchive(s);[m
[31m-      a_.startRecord(this,"");[m
[31m-    a_.writeInt(perms,"perms");[m
[31m-      a_.endRecord(this,"");[m
[31m-      return new String(s.toByteArray(), "UTF-8");[m
[31m-    } catch (Throwable ex) {[m
[31m-      ex.printStackTrace();[m
[31m-    }[m
[31m-    return "ERROR";[m
[31m-  }[m
[31m-  public void write(java.io.DataOutput out) throws java.io.IOException {[m
[31m-    BinaryOutputArchive archive = new BinaryOutputArchive(out);[m
[31m-    serialize(archive, "");[m
[31m-  }[m
[31m-  public void readFields(java.io.DataInput in) throws java.io.IOException {[m
[31m-    BinaryInputArchive archive = new BinaryInputArchive(in);[m
[31m-    deserialize(archive, "");[m
[31m-  }[m
[31m-  public int compareTo (Object peer_) throws ClassCastException {[m
[31m-    if (!(peer_ instanceof ACL)) {[m
[31m-      throw new ClassCastException("Comparing different types of records.");[m
[31m-    }[m
[31m-    ACL peer = (ACL) peer_;[m
[31m-    int ret = 0;[m
[31m-    ret = (perms == peer.perms)? 0 :((perms<peer.perms)?-1:1);[m
[31m-    if (ret != 0) return ret;[m
[31m-    if (ret != 0) return ret;[m
[31m-     return ret;[m
[31m-  }[m
[31m-  public boolean equals(Object peer_) {[m
[31m-    if (!(peer_ instanceof ACL)) {[m
[31m-      return false;[m
[31m-    }[m
[31m-    if (peer_ == this) {[m
[31m-      return true;[m
[31m-    }[m
[31m-    ACL peer = (ACL) peer_;[m
[31m-    boolean ret = false;[m
[31m-    ret = (perms==peer.perms);[m
[31m-    if (!ret) return ret;[m
[31m-    if (!ret) return ret;[m
[31m-     return ret;[m
[31m-  }[m
[31m-  public int hashCode() {[m
[31m-    int result = 17;[m
[31m-    int ret;[m
[31m-    ret = (int)perms;[m
[31m-    result = 37*result + ret;[m
[31m-    result = 37*result + ret;[m
[31m-    return result;[m
[31m-  }[m
[31m-  public static String signature() {[m
[31m-    return "LACL(iLId(ss))";[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/src/main/java/org/lab/mars/onem2m/data/Id.java b/src/main/java/org/lab/mars/onem2m/data/Id.java[m
[1mdeleted file mode 100644[m
[1mindex c173abf..0000000[m
[1m--- a/src/main/java/org/lab/mars/onem2m/data/Id.java[m
[1m+++ /dev/null[m
[36m@@ -1,126 +0,0 @@[m
[31m-// File generated by hadoop record compiler. Do not edit.[m
[31m-/**[m
[31m-* Licensed to the Apache Software Foundation (ASF) under one[m
[31m-* or more contributor license agreements.  See the NOTICE file[m
[31m-* distributed with this work for additional information[m
[31m-* regarding copyright ownership.  The ASF licenses this file[m
[31m-* to you under the Apache License, Version 2.0 (the[m
[31m-* "License"); you may not use this file except in compliance[m
[31m-* with the License.  You may obtain a copy of the License at[m
[31m-*[m
[31m-*     http://www.apache.org/licenses/LICENSE-2.0[m
[31m-*[m
[31m-* Unless required by applicable law or agreed to in writing, software[m
[31m-* distributed under the License is distributed on an "AS IS" BASIS,[m
[31m-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[m
[31m-* See the License for the specific language governing permissions and[m
[31m-* limitations under the License.[m
[31m-*/[m
[31m-[m
[31m-package org.lab.mars.onem2m.data;[m
[31m-[m
[31m-import org.lab.mars.onem2m.jute.BinaryInputArchive;[m
[31m-import org.lab.mars.onem2m.jute.BinaryOutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.CsvOutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.InputArchive;[m
[31m-import org.lab.mars.onem2m.jute.OutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.Record;[m
[31m-public class Id implements Record {[m
[31m-  private String scheme;[m
[31m-  private String id;[m
[31m-  public Id() {[m
[31m-  }[m
[31m-  public Id([m
[31m-        String scheme,[m
[31m-        String id) {[m
[31m-    this.scheme=scheme;[m
[31m-    this.id=id;[m
[31m-  }[m
[31m-  public String getScheme() {[m
[31m-    return scheme;[m
[31m-  }[m
[31m-  public void setScheme(String m_) {[m
[31m-    scheme=m_;[m
[31m-  }[m
[31m-  public String getId() {[m
[31m-    return id;[m
[31m-  }[m
[31m-  public void setId(String m_) {[m
[31m-    id=m_;[m
[31m-  }[m
[31m-  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {[m
[31m-    a_.startRecord(this,tag);[m
[31m-    a_.writeString(scheme,"scheme");[m
[31m-    a_.writeString(id,"id");[m
[31m-    a_.endRecord(this,tag);[m
[31m-  }[m
[31m-  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {[m
[31m-    a_.startRecord(tag);[m
[31m-    scheme=a_.readString("scheme");[m
[31m-    id=a_.readString("id");[m
[31m-    a_.endRecord(tag);[m
[31m-}[m
[31m-  public String toString() {[m
[31m-    try {[m
[31m-      java.io.ByteArrayOutputStream s =[m
[31m-        new java.io.ByteArrayOutputStream();[m
[31m-      CsvOutputArchive a_ = [m
[31m-        new CsvOutputArchive(s);[m
[31m-      a_.startRecord(this,"");[m
[31m-    a_.writeString(scheme,"scheme");[m
[31m-    a_.writeString(id,"id");[m
[31m-      a_.endRecord(this,"");[m
[31m-      return new String(s.toByteArray(), "UTF-8");[m
[31m-    } catch (Throwable ex) {[m
[31m-      ex.printStackTrace();[m
[31m-    }[m
[31m-    return "ERROR";[m
[31m-  }[m
[31m-  public void write(java.io.DataOutput out) throws java.io.IOException {[m
[31m-    BinaryOutputArchive archive = new BinaryOutputArchive(out);[m
[31m-    serialize(archive, "");[m
[31m-  }[m
[31m-  public void readFields(java.io.DataInput in) throws java.io.IOException {[m
[31m-    BinaryInputArchive archive = new BinaryInputArchive(in);[m
[31m-    deserialize(archive, "");[m
[31m-  }[m
[31m-  public int compareTo (Object peer_) throws ClassCastException {[m
[31m-    if (!(peer_ instanceof Id)) {[m
[31m-      throw new ClassCastException("Comparing different types of records.");[m
[31m-    }[m
[31m-    Id peer = (Id) peer_;[m
[31m-    int ret = 0;[m
[31m-    ret = scheme.compareTo(peer.scheme);[m
[31m-    if (ret != 0) return ret;[m
[31m-    ret = id.compareTo(peer.id);[m
[31m-    if (ret != 0) return ret;[m
[31m-     return ret;[m
[31m-  }[m
[31m-  public boolean equals(Object peer_) {[m
[31m-    if (!(peer_ instanceof Id)) {[m
[31m-      return false;[m
[31m-    }[m
[31m-    if (peer_ == this) {[m
[31m-      return true;[m
[31m-    }[m
[31m-    Id peer = (Id) peer_;[m
[31m-    boolean ret = false;[m
[31m-    ret = scheme.equals(peer.scheme);[m
[31m-    if (!ret) return ret;[m
[31m-    ret = id.equals(peer.id);[m
[31m-    if (!ret) return ret;[m
[31m-     return ret;[m
[31m-  }[m
[31m-  public int hashCode() {[m
[31m-    int result = 17;[m
[31m-    int ret;[m
[31m-    ret = scheme.hashCode();[m
[31m-    result = 37*result + ret;[m
[31m-    ret = id.hashCode();[m
[31m-    result = 37*result + ret;[m
[31m-    return result;[m
[31m-  }[m
[31m-  public static String signature() {[m
[31m-    return "LId(ss)";[m
[31m-  }[m
[31m-}[m
[1mdiff --git a/src/main/java/org/lab/mars/onem2m/data/Stat.java b/src/main/java/org/lab/mars/onem2m/data/Stat.java[m
[1mdeleted file mode 100644[m
[1mindex 1d5495f..0000000[m
[1m--- a/src/main/java/org/lab/mars/onem2m/data/Stat.java[m
[1m+++ /dev/null[m
[36m@@ -1,288 +0,0 @@[m
[31m-// File generated by hadoop record compiler. Do not edit.[m
[31m-/**[m
[31m-* Licensed to the Apache Software Foundation (ASF) under one[m
[31m-* or more contributor license agreements.  See the NOTICE file[m
[31m-* distributed with this work for additional information[m
[31m-* regarding copyright ownership.  The ASF licenses this file[m
[31m-* to you under the Apache License, Version 2.0 (the[m
[31m-* "License"); you may not use this file except in compliance[m
[31m-* with the License.  You may obtain a copy of the License at[m
[31m-*[m
[31m-*     http://www.apache.org/licenses/LICENSE-2.0[m
[31m-*[m
[31m-* Unless required by applicable law or agreed to in writing, software[m
[31m-* distributed under the License is distributed on an "AS IS" BASIS,[m
[31m-* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.[m
[31m-* See the License for the specific language governing permissions and[m
[31m-* limitations under the License.[m
[31m-*/[m
[31m-[m
[31m-package org.lab.mars.onem2m.data;[m
[31m-[m
[31m-import org.lab.mars.onem2m.jute.BinaryInputArchive;[m
[31m-import org.lab.mars.onem2m.jute.BinaryOutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.CsvOutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.InputArchive;[m
[31m-import org.lab.mars.onem2m.jute.OutputArchive;[m
[31m-import org.lab.mars.onem2m.jute.Record;[m
[31m-public class Stat implements Record {[m
[31m-  private long czxid;[m
[31m-  private long mzxid;[m
[31m-  private long ctime;[m
[31m-  private long mtime;[m
[31m-  private int version;[m
[31m-  private int cversion;[m
[31m-  private int aversion;[m
[31m-  private long ephemeralOwner;[m
[31m-  private int dataLength;[m
[31m-  private int numChildren;[m
[31m-  private long pzxid;[m
[31m-  public Stat() {[m
[31m-  }[m
[31m-  public Stat([m
[31m-        long czxid,[m
[31m-        long mzxid,[m
[31m-        long ctime,[m
[31m-        long mtime,[m
[31m-        int version,[m
[31m-        int cversion,[m
[31m-        int aversion,[m
[31m-        long ephemeralOwner,[m
[31m-        int dataLength,[m
[31m-        int numChildren,[m
[31m-        long pzxid) {[m
[31m-    this.czxid=czxid;[m
[31m-    this.mzxid=mzxid;[m
[31m-    this.ctime=ctime;[m
[31m-    this.mtime=mtime;[m
[31m-    this.version=version;[m
[31m-    this.cversion=cversion;[m
[31m-    this.aversion=aversion;[m
[31m-    this.ephemeralOwner=ephemeralOwner;[m
[31m-    this.dataLength=dataLength;[m
[31m-    this.numChildren=numChildren;[m
[31m-    this.pzxid=pzxid;[m
[31m-  }[m
[31m-  public long getCzxid() {[m
[31m-    return czxid;[m
[31m-  }[m
[31m-  public void setCzxid(long m_) {[m
[31m-    czxid=m_;[m
[31m-  }[m
[31m-  public long getMzxid() {[m
[31m-    return mzxid;[m
[31m-  }[m
[31m-  public void setMzxid(long m_) {[m
[31m-    mzxid=m_;[m
[31m-  }[m
[31m-  public long getCtime() {[m
[31m-    return ctime;[m
[31m-  }[m
[31m-  public void setCtime(long m_) {[m
[31m-    ctime=m_;[m
[31m-  }[m
[31m-  public long getMtime() {[m
[31m-    return mtime;[m
[31m-  }[m
[31m-  public void setMtime(long m_) {[m
[31m-    mtime=m_;[m
[31m-  }[m
[31m-  public int getVersion() {[m
[31m-    return version;[m
[31m-  }[m
[31m-  public void setVersion(int m_) {[m
[31m-    version=m_;[m
[31m-  }[m
[31m-  public int getCversion() {[m
[31m-    return cversion;[m
[31m-  }[m
[31m-  public void setCversion(int m_) {[m
[31m-    cversion=m_;[m
[31m-  }[m
[31m-  public int getAversion() {[m
[31m-    return aversion;[m
[31m-  }[m
[31m-  public void setAversion(int m_) {[m
[31m-    aversion=m_;[m
[31m-  }[m
[31m-  public long getEphemeralOwner() {[m
[31m-    return ephemeralOwner;[m
[31m-  }[m
[31m-  public void setEphemeralOwner(long m_) {[m
[31m-    ephemeralOwner=m_;[m
[31m-  }[m
[31m-  public int getDataLength() {[m
[31m-    ret